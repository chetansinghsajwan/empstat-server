generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("EMPSTAT_DATABASE_URL")
}

enum UserRole {
  admin
  employee

  @@map("user_roles")
}

model User {
  id         String   @id
  email      String   @unique
  firstName  String   @map("first_name")
  middleName String?  @map("middle_name")
  lastName   String?  @map("last_name")
  role       UserRole

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Assessment Assessment[]
  Secret    Secret[]

  @@map("users")
}

model Secret {
  userId String @id @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  password String

  @@map("secrets")
}

model Subject {
  id        String @id
  name      String
  minMarks  Int    @map("min_marks")
  maxMarks  Int    @map("max_marks")
  totalTime Int    @map("total_time")

  Training Training[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("subjects")
}

enum TrainingMode {
  online
  offline
  onsite

  @@map("training_modes")
}

model Training {
  id         String       @id
  name       String
  mode       TrainingMode
  subjectId  String       @map("subject_id")
  subject    Subject      @relation(fields: [subjectId], references: [id])
  startedAt  DateTime     @map("started_at")
  endedAt    DateTime?    @map("ended_at")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  Assessment Assessment[]

  @@map("trainings")
}

model Assessment {
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  trainingId String   @map("training_id")
  training   Training @relation(fields: [trainingId], references: [id])

  marks           Int
  internetAllowed Boolean @map("internet_allowed")

  @@id([userId, trainingId])
  @@map("assessments")
}
